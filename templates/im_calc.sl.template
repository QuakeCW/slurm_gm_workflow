export IMPATH=$gmsim/IM_calculation
export PYTHONPATH=$gmsim/qcore:/$PYTHONPATH:$IMPATH

script_start=`date`
echo "script started running at: $script_start"

runtime_fmt="%Y-%m-%d_%H:%M:%S"

{% if sim_dirs %}
echo ___calculating simulations___
{% for sim_dir, sim_name, fault_name in sim_dirs %}
    echo {{sim_dir}}
    #update db to running
    timestamp=`date +%Y%m%d_%H%M%S`
    start_time=`date +$runtime_fmt`
    echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} IM_calculation running --run_name {{sim_name}} --j $SLURM_JOBID" >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID
    #run the script
    time python $IMPATH/calculate_ims.py {{sim_dir}}/Acc/BB.bin b -o {{sim_dir}}/../IM_calc/ -np {{np}} -i {{sim_name}} -r {{fault_name}} -c {{comp}} -t s {{extended}} {{simple}}

#test before update mgmt_db
    timestamp=`date +%Y%m%d_%H%M%S`
    end_time=`date +$runtime_fmt`
    res=`python $gmsim/workflow/scripts/im_calc_checkpoint.py {{mgmt_db_location}}/Runs {{sim_name}} --t s --v `
    #update mgmt_db
    if [[ $? == 0 ]]; then
        #passed
        echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} IM_calculation completed --run_name {{sim_name}} --force" >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID
        #save metadata for collection
        #TODO:fix the weird naming
        if [[ ! -d {{mgmt_db_location}}/Runs/{{fault_name}}/{{sim_name}}/ch_log ]]; then
            mkdir {{mgmt_db_location}}/Runs/{{fault_name}}/{{sim_name}}/ch_log
        fi
        #TODO: adjust this temporary code to use the update_db once merged
        cd {{mgmt_db_location}}/Runs/{{fault_name}}/{{sim_name}}
        fd_name=`python -c "from qcore import utils; params = utils.load_sim_params('{{sim_dir}}/../sim_params.yaml'); print(params.FD_STATLIST)"`
        fd_count=`cat $fd_name | wc -l`
        nt=`python -c "from qcore import utils; params = utils.load_sim_params('{{sim_dir}}/../sim_params.yaml'); nt = float(params.sim_duration)/float(params.hf.hf_dt); print(int(nt))"`
        
        run_time=`python -c "from datetime import datetime; tdelta= datetime.strptime('$end_time', '$runtime_fmt') - datetime.strptime('$start_time', '$runtime_fmt'); print tdelta.total_seconds()/3600"`

        # Get the number of pSA IMs and components out of the result csv file
        psa_count=`python -c "with open('{{sim_dir}}/../IM_calc/{{sim_name}}/{{sim_name}}.csv', 'r') as f: print(sum([1 for header in f.readline().rstrip().split(',') if 'pSA' in header]))"`
        components=`python -c "import pandas as pd; print(list(pd.read_csv('{{sim_dir}}/../IM_calc/{{sim_name}}/{{sim_name}}.csv').component.unique().astype('U')))"`
        echo "{{sim_name}} IM_calc $SLURM_JOBID {{np}} $fd_count $nt $run_time $start_time $end_time $psa_count $components" >> {{mgmt_db_location}}/Runs/{{fault_name}}/{{sim_name}}/ch_log/IM_calc.$timestamp.$SLURM_JOBID.{{sim_name}}.log
        #
    else
        #failed
        echo "python $gmsim/workflow/scripts/management/update_mgmt_db.py {{mgmt_db_location}} IM_calculation failed --run_name {{sim_name}} --error '$res' --force"  >> {{mgmt_db_location}}/mgmt_db_queue/$timestamp\_$SLURM_JOBID
    fi
{% endfor %}
{% endif %}


{% if obs_dirs %}
echo ___calculating observed____
{% for obs_dir, obs_name, fault_name in obs_dirs %}
    echo {{obs_dir}}
	time python $IMPATH/calculate_ims.py {{obs_dir}}/*/*/accBB a -o {{obs_dir}}/../IM_calc/ -np {{np}} -i {{obs_name}} -r {{fault_name}} -c {{comp}} -t o {{extended}} {{simple}}
{% endfor %}
{% endif %}

{% if rrup_files %}
echo ___calculating rrups___
{% for srf_file, srf_output, fd in rrup_files %}
	time python $IMPATH/calculate_rrups.py -np {{np}} -o {{output_dir}}/{{srf_output}}.csv {{station_file}} {{srf_file}} {{fd}}
{% endfor %}
{% endif %}

date

